pipeline {
    agent {
        docker {
            image 'docker:24.0.7' // Docker-in-Docker image
            image 'maven:3.8.4-jdk-11'
            args '--privileged -v /var/run/docker.sock:/var/run/docker.sock' // Enable Docker-in-Docker
        }
    }
    environment {
        GIT_REPO = 'https://github.com/YugeshKumar01/Jenkins-Zero-To-Hero.git'
        GIT_USER_NAME = "YugeshKumar01"
        GIT_USER_EMAIL = "yugeshkumar6202@gmail.com"
        BRANCH_NAME = 'main' // Change if using a different branch
        GIT_CREDENTIALS_ID = 'github' // The ID of the Jenkins credential you created
        GIT_REPO_NAME = 'Jenkins-Zero-To-Hero'
        NEW_IMAGE_NAME = "yugesh01/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        SONAR_URL = "http://13.235.19.246:9000"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                // Uncomment the line below if you want to actually perform the checkout
                // git branch: "${BRANCH_NAME}", url: "${GIT_REPO}", credentialsId: "${GIT_CREDENTIALS_ID}"
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // Build the project and create a JAR file
                sh 'chmod -R 777 java-maven-sonar-argocd-helm-k8s/spring-boot-app/target'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package -X'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "yugesh01/ultimate-cicd-pipeline:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update File') {
            steps {
                script {
                    def BUILD_NUMBER = env.BUILD_NUMBER ?: '1'
                    sh """
                        echo "Replacing ${BUILD_NUMBER-1} with ${BUILD_NUMBER} in deployment.yml"
                        sed -i 's|image: .*|image: $NEW_IMAGE_NAME|' java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        # Show updated file content
                        cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    """
                }
            }
        }
        stage('Commit and Push') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh '''  
                            # Configure git
                            git config --global --add safe.directory /var/lib/jenkins/workspace/CI-Pipeline
                            git config user.name "${GIT_USER_NAME}"
                            git config user.email "${GIT_USER_EMAIL}"
                            # Add changes to the git index
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            # Commit changes
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                            # Push changes with authentication
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
