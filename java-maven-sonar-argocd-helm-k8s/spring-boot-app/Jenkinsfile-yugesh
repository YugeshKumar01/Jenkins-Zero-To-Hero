pipeline {
  agent {
    docker {
      image 'maven:latest'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    /*
    stage('Install Docker') {
      steps {
        sh '''
          apt-get update
          apt-get install -y docker.io
        '''
      }
    }
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://65.2.186.221:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "yugesh01/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    */
   stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Remove Old Directory') {
            steps {
                sh '''
                    if [ -d "java-maven-sonar-argocd-helm-k8s" ]; then
                        rm -rf java-maven-sonar-argocd-helm-k8s
                    fi
                '''
            }
        }
        stage('Fix Permissions') {
            steps {
                sh '''
                    chown -R $(whoami):$(whoami) .
                    chmod -R u+rwX .
                '''
            }
        }
        stage('Clone Repository') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        # Clone the repository
                        git clone https://github.com/YugeshKumar01/Jenkins-Zero-To-Hero.git java-maven-sonar-argocd-helm-k8s
                    '''
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s') {
                    script {
                        sh '''
                            # Ensure we are in the correct directory
                            echo "Current directory: $(pwd)"
                            ls -la

                            # Check for the presence of .git directory
                            if [ -d ".git" ]; then
                                BUILD_NUMBER=${BUILD_NUMBER}
                                sed -i "s#replaceImageTag#${BUILD_NUMBER}#g" spring-boot-app-manifests/deployment.yml
                                git config user.email "yugeshkumar6202@gmail.com"
                                git config user.name "YugeshKumar01"
                                git add spring-boot-app-manifests/deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            else
                                echo ".git directory not found!"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        } 
  }
}
